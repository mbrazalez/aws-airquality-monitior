AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
#########################################################################
Parameters:
  ## The endpoint that receives notifications ##
  SubscriptionEndPoint:
    Type: String
    Description: The endpoint that receives notifications.
  ## The subscription protocol ##
  SubscriptionProtocol:
    Type: String
    Description: The subscription protocol
    AllowedValues:
    - http
    - https
    - email
    - email-json
    - sms
    - sqs
    - application
    - lambda
    Default: email

#########################################################################
Resources:
  ## DynamoDB Table to store the air quality data ##
  AirQualityDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: AirQualityDB
      AttributeDefinitions:
        - AttributeName: "station"
          AttributeType: "S"
        - AttributeName: "timestamp"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "station"
          KeyType: "HASH"
        - AttributeName: "timestamp"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: "NEW_IMAGE"

  ## Lambda function to scrape the air quality data ##
  SeleniumFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Timeout: 120
      MemorySize: 2048
      Events:
        ScheduleEvent:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: "rate(24 hours)"
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref AirQualityDB
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AirQualityDB
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: .
      DockerTag: latest

  ## SNS topic to send notifications when there is a new entry in the air quality database ##
  AirQualityTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: AirQualityTopic

  ## SNS subscription to send notifications to the endpoint ##
  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Ref: SubscriptionEndPoint
      Protocol:
        Ref: SubscriptionProtocol
      TopicArn:
        Ref: AirQualityTopic

  ## Lambda function to send notifications when there is a new entry in the air quality database ##
  NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./notification_lambda/
      Handler: main.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Timeout: 120
      MemorySize: 2048
      Events:
        DDBEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt AirQualityDB.StreamArn
            StartingPosition: TRIM_HORIZON
      Environment:
        Variables:
          SNS_TOPIC: !Ref AirQualityTopic
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt AirQualityTopic.TopicName
